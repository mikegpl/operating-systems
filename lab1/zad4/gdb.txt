Aby doprowadzić do zrzutu pliku core, w pliku contactTree.c dodałem w linii 38 znak & odpowiadający operatorowi pobrania adresu zmiennej, w związku z czym procedura BSTNode_newNode() zamiast otrzymać jako argument zmienną typu (Contact*) otrzymała zmienną typu (Contact**). Doprowadziło do to wystąpienia SEGMENTATION_FAULT i zrzucenia pliku core podczas wywołania wyżej wymienionej procedury. Poniżej widać wykonane zmiany:

lab1/zad4/lib/contactTree.c
5	#include "contactTree.h"

36	void BST_addContact(BST *tree, Contact *contact){
37	    if(tree->root == NULL)
38	        tree->root = BSTNode_newNode(&contact);
39	    else
40	        _BST_addNode(tree, BSTNode_newNode(contact));
41	    tree->elementCounter++;
42	}

Co koliduje z poniżej przedstawioną deklaracją:

lab1/zad4/lib/contactTree.h

27 BSTNode* BSTNode_newNode(Contact*);

Aby program można było poprawnie zdebugować w gdb, skompilowano go z opcją -g. Ponadto wykonałem w powłoce komendę 'ulimit -c 52000000' aby ustawić limit wielkości pliku core na 52MB. Następnie otwarłem program i plik w gdb w następujący sposób:

gdb ./benchmark core

[New LWP 19727]
Core was generated by `./benchmark'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  __strcmp_sse2_unaligned () at ../sysdeps/x86_64/multiarch/strcmp-sse2-unaligned.S:32
32	../sysdeps/x86_64/multiarch/strcmp-sse2-unaligned.S: No such file or directory.
(gdb) list
27	in ../sysdeps/x86_64/multiarch/strcmp-sse2-unaligned.S
(gdb) bt
#0  __strcmp_sse2_unaligned () at ../sysdeps/x86_64/multiarch/strcmp-sse2-unaligned.S:32
#1  0x0000000000401de4 in Comparator_birthDate ()
#2  0x00000000004029c3 in _BST_addNode ()
#3  0x0000000000402771 in BST_addContact ()
#4  0x00000000004014f4 in _addContactsTree () at src/benchmark.c:79
#5  0x00000000004019e8 in measureTime (action=0x7fffe3dda870, 
    message=0x402fd8 "Add all remaining contacts to BST book") at src/measureTime.c:40
#6  0x000000000040109b in main () at src/benchmark.c:145
(gdb) up
#1  0x0000000000401de4 in Comparator_birthDate ()
(gdb) list
27	in ../sysdeps/x86_64/multiarch/strcmp-sse2-unaligned.S
(gdb) up
#2  0x00000000004029c3 in _BST_addNode ()
(gdb) list
27	in ../sysdeps/x86_64/multiarch/strcmp-sse2-unaligned.S
(gdb) up
#3  0x0000000000402771 in BST_addContact ()
(gdb) list
27	in ../sysdeps/x86_64/multiarch/strcmp-sse2-unaligned.S
(gdb) up
#4  0x00000000004014f4 in _addContactsTree () at src/benchmark.c:79
79	            BST_addContact(treeBook, Contact_copy(contacts[i]));
(gdb) list
74	        List_addContact(listBook, Contact_copy(contacts[0]));  		// <----------- TUTAJ
75	    }
76	
77	    void _addContactsTree(){
78	        for(int i = 1; i < contacts_number; i++)
79	            BST_addContact(treeBook, Contact_copy(contacts[i]));
80	    }
81	
82	    void _addContactsList(){
83	        for(int i = 1; i < contacts_number; i++)
(gdb) 

W tym miejscu (TUTAJ) widać, że problem leży w wywołaniu List_addContact(), a zatem po krótkim śledztwie można znaleźć odpowiedzialny za zrzut błąd.
